7.2 指標與陣列


　　由上節的例 7.4可知，可用指標變數來訪問陣列中任一元素，通常將陣列的首位址稱為陣列的指標，而將指向陣列元素的指標變數稱為指向陣列的指標變數。使用指向陣列的指標變數來處理陣列中的元素，不僅可使程式緊湊，而且還可提高程式的運算速率。
　

　　7.2.1 一維陣列與指標
　　1．陣列指標
　　陣列的首位址稱為陣列指標。若定義整型陣列a[5]，系統為陣列配置的位址從1000到1019，如圖7.5所示，則陣列a的首位址1000為陣列a的陣列指標。C++規定，陣列的首位址可用陣列名a表示，因此，陣列a的陣列指標=a=&a[0]。


　　2．陣列指標變數
　　存放陣列元素位址的變數稱為陣列指標變數。如： 
　　int a[5];
　　int *p=&a[0];
　　則p為陣列指標變數。在C++中陣列名a可用於表示陣列的首位址，所以陣列名a可作為陣列指標使用。因此：p=a與p=&a[0] 的作用是相同的。但陣列名a不能用來進行賦值運算、"++"、"- -"等運算。
　　當指標變數指向陣列首位址後，就可使用該指標變數對陣列中任何一個元素變數進行存取操作。現舉例說明如下：


　　【例7.6】用指標變數訪問陣列元素。
　# include <iostream.h>
　void main( void)
　{ int a[5]={0,1,2,3,4},i,j,*p,n=5;
　　p=a;
　　for (i=0;i<n;i++) 
　　　{ cout <<*p<<'\t'; 
　　　　p++;
　　　} 
　　cout<<endl;
　　p=a;
　　for (i=0;i<n;i++) cout <<*(p+i)<< '\t'; 
　　cout<<endl;
　　for (i=0;i<n;i++) cout <<*(a+i)<< '\t';
　　cout<<endl;
　　for (i=0;i<n;i++) cout <<p[i]<< '\t';
　　cout<<endl;
　}
　　執行程式後，輸出：
　　0 1 2 3 4
　　0 1 2 3 4
　　0 1 2 3 4
　　0 1 2 3 4


由上例可以看出，訪問陣列元素值有三種方法：
　　（1）通過移動指標變數，依次訪問陣列元素。如：
　　p=a; 
　　for (i=0;i<n;i++) 
　　{ cout <<*p<<'\t'; p++;} 
　　首先將指標變數p指向陣列a的首位址。然後用*p輸出陣列第i個元素的值，每次輸出後用p++移動指標到下一個元素，依次迴圈直到結束。注意：cout 　　<<*p<<'\t'; p++;可合並為一條語句：cout<<*p++<<'\t';
　　（2）指標變數不變，用p+i或 a+i 訪問陣列第i個元素。如：
　　for (i=0;i<n;i++) cout <<*(p+i)<< '\t'; 
　　for (i=0;i<n;i++) cout <<*(a+i)<< '\t';
　　在C++中允許用p+i 或a+i 表示第i 個元素的位址。因此，*(p+i)與*(a+i)均表示第i個元素的內容。
　　（3）以指標變數名作為陣列名訪問陣列元素。如：
　　for (i=0;i<n;i++) cout <<p[i]<< '\t';
　　若用指標變數名p作為陣列名，則p[i]表示陣列的第i個元素a[i]。

　3．陣列元素的引用
　

　　綜上所述，對一維陣列a[ ]而言，當p=a後，有如下等同關系成立：
　　１ p+i=a+i=&a[i]，即p+i、a+i 均表示第i個元素的位址&a[i]。
　　２ *(p+i) =*(a+i)=p[i]= a[i]。即*(p+i), *(a+i), p[i]均表示第i個元素值a[i]。
　　其中p[i] 的運行效率最高。
　　由上所述可知：一維陣列的第i個元素可用四種方式引用，即： a[i]、*(p+i) 、*(a+i)、p[i]。

7.2.2 二維陣列與指標


　　1．二維陣列元素在記憶體中的存放方式
　　在C++中，二維陣列元素值在記憶體中是按行的順序存放的。若定義二維整型陣列a[3][3]，假設編譯系統為陣列a配置的記憶體空間從1000開始到1035為止，則陣列中各元素a[0][0]~a[2][2]在記憶體中按行存放次序如圖7.6所示。因此，與一維陣列類別似，可用指標變數來訪問二維陣列元素。


　　【例7.7】用指標變數輸出二維陣列各元素的值。
　# include <iostream.h>
　void main(void)
　{ int a[3][3]={{1,2,3},{4,5,6},{7,8,9}};
　　int *p=&a[0][0]; //將二維陣列首位址賦給指標變數p
　　for (int i=0;i<9;i++) 
　　{ cout<<*p<<'\t'; //輸出二維陣列中第i個元素值
　　　p++; //指標變數p加1，指向下一個元素
　　}
　}
　　程式執行後輸出結果為：
　　1 2 3 4 5 6 7 8 9
　　但要用上述指標變數p訪問二維陣列中任意指定元素a[i][j]就覺得很不方便，為此C++設計者提供另外幾種訪問二維陣列元素的方法，為了了解訪問二維陣列元素的方法，必須了解三個位址概念，即：二維陣列行首位址、行位址、元素位址，現介紹如下。
　　

　　2．二維陣列行首位址


　　二維陣列各元素按行排列可寫成如圖7.7所示矩陣形式，若將第i行中的元素a[i][0]、a[i][1]、a[i][2]組成一維陣列a[i] (i=0,1,2)，則二維陣列a[3][3]可看成是由三個一維陣列元素a[0]、a[1]、a[2]組成。即：a[3][3]=(a[0]，a[1]，a[2])，其中：a[0]、a[1]、a[2]是分別表示二維陣列a[3][3]的第0、1、2行元素。



即：a[0]=(a[0][0],a[0][1],a[0][2])
　　a[1]=(a[1][0],a[1][1],a[1][2])
　　a[2]=(a[2][0],a[2][1],a[2][2])
　　因為陣列名可用來表示陣列的首位址，所以一維陣列名a[i]可表示一維陣列 (a[i][0],a[i][1],a[i][2])的首位址&a[i][0]，即可表示第i行元素的首位址。因此，二維陣列a中第i行首位址（即第i行第0列元素位址）可用a[i]表示。
　　由例 7.6可知，一維陣列的第i個元素位址可表示為：陣列名+i。因此一維陣列a[i]中第j個元素a[i][j]位址可表示為：a[i]+j ，即：二維陣列a中第i行第j列元素a[i][j]的位址可用a[i]+j來表示，而元素a[i]][j]的值為：*(a[i]+j)。
　　【例7.8】定義一個3行3列陣列，輸出每行的首位址及所有元素值。
　# include <iostream.h>
　void main(void)
　{ int a[3][3]={{1,2,3},{4,5,6},{7,8,9}};
　　for (int i=0;i<3;i++)
　　　{ cout<<"a[" <<i<<"]="<<a[i]<< "="<<&a[i][0]<<endl;
　　　　　for (int j=0;j<3;j++)
　　　　cout<<"a[" <<i<<"]["<<j<<"]="<<*(a[i]+j)<< "="<<a[i][j]<<endl;
　　　} 
　}
　　程式執行後輸出：
　　a[0]=0x0065FDD4=0x0065FDD4
　　a[0][0]=1=1
　　a[0][1]=2=2
　　a[0][2]=3=3
　　a[1]=0x0065FDE0=0x0065FDE0
　　a[1][0]=4=4
　　a[1][1]=5=5
　　a[1][2]=6=6
　　a[2]=0x0065FDEC=0x0065FDEC
　　a[2][0]=7=7
　　a[2][1]=8=8
　　a[2][2]=9=9
　　由此例輸出結果可看出a[i]=&a[i][0] (i=0,1,2)，這顯示a[i]確實可以表示第i行首位址（即第i行第0列位址）&a[i][0]。
　　讀者應注意，由於陣列在記憶體的位址是由作業系統 動態配置，因此，實際輸出的各行首位址並不會如圖7.5所假設的從1000到1035。通常位址用十六進制數表示，如在本例中：第0行實際首位址是：a[0]=0x0065FDD4。第1行實際首位址是：a[1]=0x0065FDE0。第2行實際首位址是：a[2]=0x0065FDEC。

3．二維陣列行位址 


　　為了區別陣列指標與指向一維陣列的指標，C++引入了行位址的概念，並規定二維陣列a中第i行位址用a+i或&a[i]表示，行位址的值與行首位址的值是相同的，即：
　　a+i=&a[i]=a[i]=&a[i][0]
　　但兩者型別不同，所以行位址a+i與&a[i]只能用於指向一維陣列的指標變數，而不能用於一般指標變數，例如：
　　int a[3][3];
　　int *p=a+0;
　　則編譯第二條指令時將會出錯，編譯系統提示用戶p與a+0的型別不同。如果要將行位址賦陣列指標變數，必須用強制型別轉換，如：
　　int *p=(int *) (a+0);
　　關於指向一維陣列的指標將在後文中介紹。
　　二維陣列名a可用於表示二維陣列的首位址，但C++規定該首位址並不是二維陣列中第0行第0列的位址(即a≠a[0][0])，而是第0 行的行位址，即a=a+0=&a[0]。

4．二維陣列的元素位址與元素值
　　

　　知道了二維陣列的行位址與行首位址後，可以討論二維陣列的元素位址。
　　因為 a[i]=*&a[i]= *(a+i)，所以 *(a+i) 可以表示第 i行的首位址。因此二維陣列第i行首位址有三種表示方法：a[i] 、*(a+i)、&a[i][0]。
　　由此可推知：第i行第j列元素a[i][j]的位址有四種表示方法：
　　a[i]+j 、*(a+i)+j、&a[i][0]+j、&a[i][j]
　　而第i行第j列元素a[i][j]值也有四種表示方法：
　　*(a[i]+j) 、 *(*(a+i)+j)、*(&a[i][0]+j)、a[i][j]
　　現將二維陣列有關行位址、行首位址、元素位址、元素值的各種表示方式總結歸納如表7.1 所示：


　　表7.1 二維陣列a的行位址、行首位址、元素位址、元素值的各種表示方式
　　行位址、元素位址、元素值 表示方式
　　第i行行位址 a+i、&a[i]
　　第i行首位址(第i行第0列位址) a[i]、 *(a+i)、 &a[i][0]
　　元素a[i][j]的位址 a[i]+j 、*(a+i)+j 、&a[i][0]+j、&a[i][j]
　　第i行第j列元素值 *(a[i]+j) 、 *(*(a+i)+j) 、 *(&a[i][0]+j)、a[i][j]
　　為了加深讀者對二維陣列a的行位址、行首位址、元素位址、元素值的各種表示方式的理解，現舉例如下：


　　【例7.9】定義二維陣列a[3][3]，用二種方式輸出行位址，用三種方式輸出行首位址，用四種方式輸出所有元素位址及元素值。
　# include <iostream.h>
　void main(void)
　{ int a[3][3]={{1,2,3},{4,5,6},{7,8,9}};
　　for (int i=0;i<3;i++)
　　　　{ cout<<"&a["<<i<<"]="<<&a[i]<<"="<<a+i<<endl; //輸出第i行行位址
　　　　　cout<<"a["<<i<<"]="<<a[i]<<"="<<*(a+i)<<"="<<&a[i][0]<<endl; //行首位址
　　for (int j=0;j<3;j++)
　　　　{ cout<<"&a["<<i<<"]["<<j<<"]="<<a[i]+j<<"="<<*(a+i)+j<<"="<<
　　　　　&a[i][0]+j<<"="<<&a[i][j]<<endl; //輸出元素a[i][j]的位址
　　cout<<"a["<<i<<"]["<<j<<"]="<<*(a[i]+j)<<"="<<*(*(a+i)+j)<<
　　"="<<*(&a[i][0]+j)<<"="<<a[i][j]<<endl; //輸出元素a[i][j]的值
　　　　}
　　　　} 
　}
　　程式執行後輸出結果為：
　　&a[0]= 0x0065FDD4=0x0065FDD4
　　a[0]= 0x0065FDD4=0x0065FDD4=0x0065FDD4
　　&a[0][0]= 0x0065FDD4=0x0065FDD4=0x0065FDD4=0x0065FDD4
　　a[0][0]=1=1=1=1
　　&a[0][1]= 0x0065FDD8=0x0065FDD8=0x0065FDD8=0x0065FDD8
　　a[0][1]=2=2=2=2
　　&a[0][2]= 0x0065FDDC=0x0065FDDC=0x0065FDDC=0x0065FDDC
　　a[0][2]=3=3=3=3
　　&a[1]= 0x0065FDE0=0x0065FDE0
　　a[1]= 0x0065FDE0=0x0065FDE0=0x0065FDE0
　　&a[1][0]= 0x0065FDE0=0x0065FDE0=0x0065FDE0=0x0065FDE0
　　a[1][0]=4=4=4=4
　　&a[1][1]= 0x0065FDE4=0x0065FDE4=0x0065FDE4=0x0065FDE4
　　a[1][1]=5=5=5=5
　　&a[1][2]= 0x0065FDE8=0x0065FDE8=0x0065FDE8=0x0065FDE8
　　a[1][2]=6=6=6=6
　　&a[2]= 0x0065FDEC=0x0065FDEC
　　a[2]= 0x0065FDEC=0x0065FDEC=0x0065FDEC
　　&a[2][0]= 0x0065FDEC=0x0065FDEC=0x0065FDEC=0x0065FDEC
　　a[2][0]=7=7=7=7
　　&a[2][1]= 0x0065FDF0=0x0065FDF0=0x0065FDF0=0x0065FDF0
　　a[2][1]=8=8=8=8
　　&a[2][2]= 0x0065FDF4=0x0065FDF4=0x0065FDF4=0x0065FDF4
　　a[2][2]=9=9=9=9
　　此例可說明表7.1中的二維陣列a的行位址、行首位址、元素位址、元素值的各種表示方式是正確的。






　



